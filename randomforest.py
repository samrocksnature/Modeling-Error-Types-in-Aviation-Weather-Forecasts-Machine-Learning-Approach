# -*- coding: utf-8 -*-
"""randomforest

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bSRC3wJ0OE5R5pq91OeKMw4JbZWbq5ir
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix  # Import confusion_matrix
import numpy as np

# Load the data
data = pd.read_csv('/content/merged_metar_taf.csv')

# Define the list of features and target variable
features = ['Ceiling_TAF (ft)', 'Visibility_TAF (km)', 'Altitude (ft)', 'Latitude (degrees)', 'Longitude (degrees)', 'Distance (km)',
            'Koppen Climate Classification']
target = 'Error_type'

# Fix non-numeric issues for specific columns
# Handle '+' in visibility columns
data['Visibility_METAR (km)'] = data['Visibility_METAR (km)'].replace({'10+': 10, '6+': 6}, regex=True).astype(float)
data['Visibility_TAF (km)'] = data['Visibility_TAF (km)'].replace({'6+': 6}, regex=True).astype(float)

# Clean longitude column by removing leading characters
data['Longitude (degrees)'] = data['Longitude (degrees)'].str.extract(r'([-0-9.]+)').astype(float)

# Encode categorical variables
data['Weather_TAF'] = data['Weather_TAF'].astype('category').cat.codes  # Encode Weather_TAF
data['Koppen Climate Classification'] = data['Koppen Climate Classification'].astype('category').cat.codes  # Encode climate classification

# Map Error_type to numeric values
error_mapping = {
    'Correct - No error (0)': 0,
    'Fail to Detect - Type II (2) error': 2,
    'False Alarm - Type I (1) error': 1
}
data['Error_type'] = data['Error_type'].map(error_mapping)

# Drop rows with any remaining non-numeric or missing values
data[features + [target]] = data[features + [target]].apply(pd.to_numeric, errors='coerce')
data = data.dropna()

# Ensure the dataset is not empty after cleaning
if data.empty:
    raise ValueError("The dataset is empty after filtering. Please check the input data.")

# Splitting the data
X = data[features].values
y = data[target].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=599555)

# Fitting Random Forest Classifier
rf_class = RandomForestClassifier(n_estimators=150, random_state=663474, max_depth=50, max_features='sqrt')
rf_class.fit(X_train, y_train)

# Displaying Variable Importance
var_names = pd.DataFrame(features, columns=['var_name'])
loss_reduction = pd.DataFrame(rf_class.feature_importances_, columns=['loss_reduction'])
var_importance = pd.concat([var_names, loss_reduction], axis=1)
var_importance = var_importance.sort_values("loss_reduction", axis=0, ascending=False)
print("Variable Importance:\n", var_importance)

# Computing Prediction Accuracy
y_pred = rf_class.predict(X_test)
accuracy = (y_pred == y_test).mean()
print(f"Prediction Accuracy: {accuracy:.2f}")

# Compute and print the confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)